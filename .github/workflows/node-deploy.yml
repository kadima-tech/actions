name: Node QA

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
      baseDir:
        required: true
        type: string
      stage:
        required: true
        type: string
      scope:
        required: false
        type: string
      tag:
        required: true
        type: string
      postgres:
        default: false
        type: boolean
      redis:
        default: false
        type: boolean
      dockerfile:
        required: false
        type: string
        description: "The docker file to use"
      artifact-repository-project:
        required: true
        type: string
        description: The artifact repository to use

    secrets:
      token:
        required: true
      artifact_registry_upload_key:
        required: false
      cloudrun_uploader_service_account:
        required: true
      postgres_username:
        required: false
      postgres_password:
        required: false
      postgres_database:
        required: false

jobs:
  test:
    if: ${{ fromJSON(inputs.postgres) != true }}
    name: Run tests
    runs-on: ubuntu-latest

    steps:
      - uses: kadima-tech/actions/checkout@dockerfile-arg
        with:
          submodules: recursive
          token: ${{ secrets.token }}
          scope: ${{ inputs.scope }}

      - name: Run tests
        uses: kadima-tech/actions/test@master
        with:
          token: ${{ github.token }}
          baseDir: ${{ inputs.baseDir }}

  test-with-postgres:
    if: ${{ fromJSON(inputs.postgres) && fromJSON(inputs.redis) != true }}
    name: Run tests
    runs-on: ubuntu-latest

    env:
      DATABASE_URL: postgresql://postgres:mysecretpassword@localhost:5432/test

    steps:
      - uses: kadima-tech/actions/checkout@dockerfile-arg
        with:
          submodules: recursive
          token: ${{ secrets.token }}
          scope: ${{ inputs.scope }}

      - name: Run tests
        uses: kadima-tech/actions/test@master
        with:
          token: ${{ github.token }}
          baseDir: ${{ inputs.baseDir }}

    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

  test-with-postgres-and-redis:
    if: ${{ fromJSON(inputs.postgres) && fromJSON(inputs.redis)}}
    name: Run tests
    runs-on: ubuntu-latest

    env:
      DATABASE_URL: postgresql://postgres:mysecretpassword@localhost:5432/test

    steps:
      - uses: kadima-tech/actions/checkout@dockerfile-arg
        with:
          submodules: recursive
          token: ${{ secrets.token }}
          scope: ${{ inputs.scope }}

      - name: Run tests
        uses: kadima-tech/actions/test@master
        with:
          token: ${{ github.token }}
          baseDir: ${{ inputs.baseDir }}

    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

  install-and-deploy:
    needs: [test, test-with-postgres, test-with-postgres-and-redis]
    runs-on: ubuntu-latest
    timeout-minutes: 30

    if: |
      always() && 
      (
        needs.test-with-postgres.result == 'success' ||
        needs.test.result == 'success' ||
        needs.test-with-postgres-and-redis.result == 'success'
      )

    steps:
      - uses: kadima-tech/actions/checkout@dockerfile-arg
        with:
          submodules: recursive
          token: ${{ secrets.token }}
          scope: ${{ inputs.scope }}

      - name: Install NPM dependencies and compile app
        uses: kadima-tech/actions/compile@master
        with:
          baseDir: ${{ inputs.baseDir }}

      - name: Publish docker container
        uses: kadima-tech/actions/docker-push@dockerfile-arg
        with:
          token: ${{ github.token }}
          gcr-service-json: ${{ secrets.artifact_registry_upload_key }}
          baseDir: ${{ inputs.baseDir }}
          project: ${{ inputs.project }}
          tag: ${{ inputs.tag }}
          dockerfile: ${{ inputs.dockerfile }}
          artifact-repository-project: ${{ inputs.artifact-repository-project }}

      - name: Run Migrations
        uses: kadima-tech/actions/migrate@master
        if: ${{ fromJSON(inputs.postgres) }}
        with:
          baseDir: ${{ inputs.baseDir }}
          gcr-service-json: ${{ secrets.cloudrun_uploader_service_account }}
          stage: ${{ inputs.stage }}
          postgres-username: ${{ secrets.postgres_username }}
          postgres-password: ${{ secrets.postgres_password }}
          postgres-database: ${{ secrets.postgres_database }}

      - name: Deploy to Google
        uses: kadima-tech/actions/deploy-to-cloudrun@dockerfile-arg
        with:
          baseDir: ${{ inputs.baseDir }}
          gcr-service-json: ${{ secrets.cloudrun_uploader_service_account }}
          stage: ${{ inputs.stage }}
          tag: ${{ inputs.tag }}
